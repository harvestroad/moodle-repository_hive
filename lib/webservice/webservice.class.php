<?phprequire_once(dirname(__FILE__).'/../nusoap-0.7.3/nusoap.php');class WebService {	public static $repositorySchema = 'http://www.harvestroad.com/hive/schema/api/repository';	public static $commonSchema = 'http://www.harvestroad.com/hive/schema/api/common';	public static $publicSchema = 'http://www.harvestroad.com/hive/schema/api/public';	public static function getClientFromSession($repositoryid, $authenticate = false, $guestuser = false) {		global $SESSION;		// Get the Soap Client connection to the Hive web services from the session		$repositoryClient = unserialize($SESSION->{'repositoryClient'.$repositoryid});		if (empty($repositoryClient) || $authenticate)		{			$options = repository::get_instance($repositoryid)->options;		}		if (empty($repositoryClient)) {			$repositoryClient = self::getClient($options['hwsurl']);			$authenticate = true;		}		if ($authenticate)		{			// Always set HTTP headers for SSO login on the SOAP client in case 					$ssousername = $options['ssousername']; // SSO user					if ($guestuser)			{				$username = $options['ssoguestuser']; // Guest user					}			else			{				$username = $_SESSION['USER']->username; // End user/Moodle user			}			$hashtype = $options['hashtype']; // type of hashing (MD5 or SHA)			$hashencoding = $options['hashencoding']; // encoding					// Get one time token			$jhsf_client = JHSFWebService::getClient($options['hwsurl']);			$token = JHSFWebService::getToken($jhsf_client); // token					// Hash the key			$ssosharedsecret = $options['ssosharedsecret']; // shared secret			$hash = HashEncoder::hash($token.$username,$ssosharedsecret,$hashtype,$hashencoding); // hash			self::setHeader($repositoryClient,'ssousername',$ssousername);			self::setHeader($repositoryClient,'username',$username);			self::setHeader($repositoryClient,'hashtype',$hashtype);			self::setHeader($repositoryClient,'hashencoding',$hashencoding);			self::setHeader($repositoryClient,'token',$token);			self::setHeader($repositoryClient,'hash',$hash);		}		$SESSION->{'repositoryClient'.$repositoryid} = serialize($repositoryClient);		return $repositoryClient;	}	public static function getClient($hwsURI){		// NuSoap does not seem to support wsdl importation		// Therefore hive?wsdl (http://localhost:8084/hws/secure/soap/v4/hive), which imports repository.wsdl, cannot be used here		$client = new nusoap_client(trim($hwsURI).'/secure/soap/v4/repository',false);		$client->soap_defencoding = 'UTF-8';		$client->decode_utf8 = false;		return $client;	}		public static function getPublicClientFromSession($repositoryid) {		global $SESSION;		// Get the Soap Client connection to the Hive web services from the session		$publicClient = unserialize($SESSION->{'publicClient'.$repositoryid});		if (empty($publicClient))		{			$options = repository::get_instance($repositoryid)->options;			$publicClient = self::getPublicClient($options['hwsurl']);		}		$SESSION->{'publicClient'.$repositoryid} = serialize($publicClient);		return $publicClient;	}	public static function getPublicClient($hwsURI){		$client = new nusoap_client(trim($hwsURI).'/public/soap/v4/hive',false);		$client->soap_defencoding = 'UTF-8';		$client->decode_utf8 = false;		return $client;	}		public static function setHeader($repositoryClient,$parameterName,$parameterValue) {		$repositoryClient->outgoing_headers[$parameterName] = $parameterValue;	}	public static function unsetHeader($repositoryClient,$parameterName) {		unset($repositoryClient->outgoing_headers[$parameterName]);	}	public static function getHeader($repositoryClient,$parameterName) {		return $repositoryClient->outgoing_headers[$parameterName];	}	// This method is the very first method used by the plug-in	// @param object $repositoryClient SOAP client    // @return array with list of bureaus and SOAP client with connection to Hive	public static function getBureauList($repositoryid)	{			$bureauList = self::invokeWebMethod($repositoryid, 'getBureauList',array(),self::$repositorySchema);		// Problem with NuSOAP when service returns only one result		if ($bureauList['totalNumberOfBureaus'] > 0 && count($bureauList['bureauList']['list'][0]['id']) == 0) {			$values = $bureauList['bureauList']['list'];			$bureauList['bureauList']['list'] = array();						$bureauList['bureauList']['list'][0] = $values;		}				return array('bureauList'=>$bureauList);	}	public static function invokeWebMethod($repositoryid, $operationName, $parameters, $schema)	{		global $SESSION;		$repositoryClient = self::getClientFromSession($repositoryid);				$retry = 3;		while ($retry > 0) {			$ret = $repositoryClient->call($operationName,$parameters,$schema);			$retry--;			// clear headers			self::unsetHeader($repositoryClient,'ssousername');			self::unsetHeader($repositoryClient,'username');			self::unsetHeader($repositoryClient,'hashtype');			self::unsetHeader($repositoryClient,'hashencoding');			self::unsetHeader($repositoryClient,'token');			self::unsetHeader($repositoryClient,'hash');			// store session			$SESSION->{'repositoryClient'.$repositoryid} = serialize($repositoryClient);			if ($retry > 0 && self::isAuthenticationError($repositoryClient) !== false)			{				if ($retry == 2)				{					$repositoryClient = self::getClientFromSession($repositoryid, true, false);				}				else // try guest user				{					$repositoryClient = self::getClientFromSession($repositoryid, true, true);				}			}			else			{				$retry = 0;			}		}		return $ret;	}	public static function invokePublicWebMethod($repositoryid, $operationName, $parameters, $schema)	{		global $SESSION;		$publicClient = self::getPublicClientFromSession($repositoryid);				$ret = $publicClient->call($operationName,$parameters,$schema);		return $ret;	}	public static function isAuthenticationError($repositoryClient)	{		return stripos($repositoryClient->getError(), 'authentication failed');	}	// Get item details	// @param object $repositoryClient SOAP client    // @return array with list of bureaus and SOAP client with connection to Hive	public static function getItemDetails($repositoryid, $bureauId, $aliasId)	{			$bureauIdVal = new soapval('bureauId',false,$bureauId,self::$publicSchema,false,false);		$idTypeVal = new soapval('idType',false,'ALIAS_ID',self::$publicSchema,false,false);		$aliasIdVal = new soapval('id',false,$aliasId,self::$publicSchema,false,false);				$itemDetails = self::invokePublicWebMethod($repositoryid,'getItemDetails',array('bureauId'=>$bureauIdVal,'id'=>$aliasIdVal,'idType'=>$idTypeVal),self::$publicSchema);				return array('itemDetails'=>$itemDetails);	}		// An empty parentCategoryId is NOT mandatory: it only prevents a bug found in hws alpha 5	public static function getCategoryDetailsList($repositoryid,$bureauId,$start=1,$range=1,$parentCategoryId='')	{		$bureauIdVal = new soapval('bureauId',false,$bureauId,self::$repositorySchema,false,false);		$parentCategoryIdVal = new soapval('parentCategoryId',false,$parentCategoryId,self::$repositorySchema,false,false);				$pagination = new soapval('pagination',false,array(			'listStart' => new soapval('listStart',false,$start,self::$commonSchema,false,false),			'listRange' => new soapval('listRange',false,$range,self::$commonSchema,false,false),		),self::$repositorySchema,false,false);						$categoryList = self::invokeWebMethod($repositoryid,'getCategoryDetailsList',array('bureauId'=>$bureauIdVal,'parentCategoryId'=>$parentCategoryIdVal,'pagination'=>$pagination),self::$repositorySchema);				// Problem with NuSOAP when service returns only one result		if ($categoryList['totalNumberOfCategories'] > 0 && count($categoryList['categoryDetailsList']['list'][0]['id']) == 0) {			$values = $categoryList['categoryDetailsList']['list'];			$categoryList['categoryDetailsList']['list'] = array();						$categoryList['categoryDetailsList']['list'][0] = $values;		}				return $categoryList;	}		public static function getItemDetailsList($repositoryid,$bureauId,$categoryId,$start=1,$range=1)	{		$bureauIdVal = new soapval('bureauId',false,$bureauId,self::$repositorySchema,false,false);		$categoryIdVal = new soapval('categoryId',false,$categoryId,self::$repositorySchema,false,false);				$pagination = new soapval('pagination',false,array(			'listStart' => new soapval('listStart',false,$start,self::$commonSchema,false,false),			'listRange' => new soapval('listRange',false,$range,self::$commonSchema,false,false),		),self::$repositorySchema,false,false);				$itemList = self::invokeWebMethod($repositoryid,'getItemDetailsList',array('bureauId'=>$bureauIdVal,'categoryId'=>$categoryIdVal,'pagination'=>$pagination),self::$repositorySchema);				// Problem with NuSOAP when service returns only one result		if ($itemList['totalNumberOfItems'] > 0 && count($itemList['itemDetailsList']['list'][0]['aliasId']) == 0) {			$values = $itemList['itemDetailsList']['list'];			$itemList['itemDetailsList']['list'] = array();						$itemList['itemDetailsList']['list'][0] = $values;		}				return $itemList;	}		public static function download($repositoryid,$aliasId,$public = false) {		$aliasIdVal = new soapval('id',false,$aliasId,self::$publicSchema,false,false);		$idTypeVal = new soapval('idType',false,'ALIAS_ID',self::$publicSchema,false,false);		$viewTypeVal = new soapval('viewType',false,'DOWNLOAD',self::$publicSchema,false,false);				if ($public)		{			$content = self::invokePublicWebMethod($repositoryid,'retrieveItem',array('viewType'=>$viewTypeVal,'id'=>$aliasIdVal,'idType'=>$idTypeVal),self::$publicSchema);		}		else		{			$content = self::invokeWebMethod($repositoryid,'retrieveItem',array('viewType'=>$viewTypeVal,'id'=>$aliasIdVal,'idType'=>$idTypeVal),self::$publicSchema);		}				return base64_decode($content);	}	public static function standardSearch($repositoryid,$searchText,$start=1,$range=1)	{		/*		@XmlElement(required = true)		    protected String bureauId;		    protected StringList searchBureauId;		    protected StringList categoryId;		    @XmlElement(required = true)		    protected String searchTerm;		    @XmlElement(required = true)		    protected MatchType matchType;		    protected Boolean searchAllBureaus;		    protected Boolean searchSubCategories;		    protected Boolean titleAndDescriptionOnly;		    protected Boolean checkedOutOnly;		    protected Boolean addedByMeOnly;		    protected Boolean includePublicItems;		    protected String contentLanguage;		    protected String dateFilterType;		    @XmlSchemaType(name = "dateTime")		    protected XMLGregorianCalendar dateFilter;		    protected StringList itemTypeId;		    protected StringList mimeTypeId;				$stdSearchOptions = new soapval('stdSearchOptions',false,array(			new soapval('bureauId',false,'11',self::$repositorySchema,false,false),			new soapval('searchBureauId',false,array("list"=>11),self::$repositorySchema,false,false),			new soapval('categoryId',false,array("list"=>24),self::$repositorySchema,false,false),			new soapval('searchTerm',false,$searchTerm,self::$repositorySchema,false,false),			new soapval('matchType',false,'ANY',self::$repositorySchema,false,false),			new soapval('searchAllBureaus',false,false,self::$repositorySchema,false,false),			new soapval('searchSubCategories',false,false,self::$repositorySchema,false,false),			new soapval('titleAndDescriptionOnly',false,true,self::$repositorySchema,false,false),			new soapval('checkedOutOnly',false,false,self::$repositorySchema,false,false),			new soapval('addedByMeOnly',false,false,self::$repositorySchema,false,false),			new soapval('includePublicItems',false,true,self::$repositorySchema,false,false),			new soapval('contentLanguage',false,'',self::$repositorySchema,false,false),			new soapval('dateFilterType',false,'',self::$repositorySchema,false,false),			new soapval('dateFilter',false,'',self::$repositorySchema,false,false),			new soapval('itemTypeId',false,array(),self::$repositorySchema,false,false),			new soapval('mimeTypeId',false,array(),self::$repositorySchema,false,false)		),		self::$repositorySchema,false,false);		*/				$bureauList = self::getBureauList($repositoryid);		$bureauId = $bureauList['bureauList']['bureauList']['list'][0]['id'];				$stdSearchOptions = new soapval('stdSearchOptions',false,array(			new soapval('bureauId',false,$bureauId,self::$repositorySchema,false,false),			new soapval('searchTerm',false,$searchText,self::$repositorySchema,false,false),			new soapval('matchType',false,'ANY',self::$repositorySchema,false,false),			new soapval('searchAllBureaus',false,true,self::$repositorySchema,false,false),			new soapval('searchItemInformation',false,true,self::$repositorySchema,false,false),			new soapval('searchFileContent',false,true,self::$repositorySchema,false,false)		),self::$repositorySchema,false,false);				$validateResponseLength = new soapval('validateResponseLength',false,'SUBMIT_ONLY',self::$repositorySchema,false,false);				$pagination = new soapval('pagination',false,array(			'listStart' => new soapval('listStart',false,$start,self::$commonSchema,false,false),			'listRange' => new soapval('listRange',false,$range,self::$commonSchema,false,false),		),self::$repositorySchema,false,false);				$searchlist = self::invokeWebMethod($repositoryid,'hive4standardSearch',array(					'stdSearchOptions'=>$stdSearchOptions,					'validateResponseLength'=>$validateResponseLength,					'pagination'=>$pagination),self::$repositorySchema);		// Problem with NuSOAP when service returns only one result		if ($searchlist['totalNumberOfResults'] > 0 && count($searchlist['searchResults']['list'][0]['aliasId']) == 0) {			$values = $searchlist['searchResults']['list'];			$searchlist['searchResults']['list'] = array();						$searchlist['searchResults']['list'][0] = $values;		}				return $searchlist;	}		public static function logout($repositoryid) {		self::invokeWebMethod($repositoryid,'logout',array(),self::$repositorySchema);	}	}?>